import requests
import pandas as pd
from pathlib import Path

# ========= CONFIG =========
AUTH_URL = "https://annotator-api.catylex.com/api/v1/authentication/token"
CONFIDENCE_URL = "https://annotator-api.catylex.com/api/v1/dashboards/confidence"

ACCESS_KEY = "683c43416c47a1b022518907"
SECRET_KEY = "32bT2vBsnC1mYLdFOhz8Vn71FEhfuu0V"
CSRF_TOKEN = "XlGcjBzw6kzly9oHYA0ItVQyEMX4XufIpEugkqhKnXNKHgME9plUYdKz7T7AL7wb"  # from your curl
VIEW_ID = "66ab463414cb484ffe2e8154"  # from your curl

WORKSPACE_A = "68b7d730b281b1fc3916b522"
WORKSPACE_B = "68a95d158cfcd6ea4fa19f05"

EXPORT_TO_EXCEL = True
EXPORT_PATH = Path("confidence_comparison.xlsx")
# =========================


def get_bearer_token() -> str:
    payload = {"access_key": ACCESS_KEY, "secret_key": SECRET_KEY}
    headers = {"accept": "*/*", "Content-Type": "application/json", "X-CSRFTOKEN": CSRF_TOKEN}

    resp = requests.post(AUTH_URL, headers=headers, json=payload, timeout=30)
    print(f"üì° Token Status: {resp.status_code}")
    resp.raise_for_status()

    data = resp.json()
    token = data.get("access_token")
    if not token:
        raise RuntimeError("No 'access_token' in token response.")
    return token


def fetch_confidence(token: str, workspace_id: str) -> dict:
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json",
        "accept": "application/json",
        "X-CSRFTOKEN": CSRF_TOKEN,
    }
    body = {"view": VIEW_ID, "workspaces": [workspace_id]}

    resp = requests.post(CONFIDENCE_URL, headers=headers, json=body, timeout=60)
    print(f"\nüì° Confidence API for workspace {workspace_id} ‚Üí {resp.status_code}")
    resp.raise_for_status()
    return resp.json()


def to_df(workspace_id: str, payload: dict) -> pd.DataFrame:
    """Converts dashboard_data into DataFrame with all 5 metrics."""
    items = payload.get("dashboard_data", [])
    rows = []
    for it in items:
        rows.append(
            {
                "cid": it.get("cid"),
                "Concept Name": it.get("cname"),
                "High Conf": it.get("high_conf", 0),
                "Medium High Conf": it.get("medium_high", 0),
                "Medium Conf": it.get("medium_conf", 0),
                "Probably Missing": it.get("probably_missing", 0),
                "Confirmed Missing": it.get("confirmed_missing", 0),
            }
        )
    df = pd.DataFrame(rows)
    if df.empty:
        return pd.DataFrame(columns=[
            "cid", "Concept Name", "High Conf", "Medium High Conf",
            "Medium Conf", "Probably Missing", "Confirmed Missing"
        ]).set_index("cid")
    df["Workspace"] = workspace_id
    return df.set_index("cid")


def side_by_side(df_a: pd.DataFrame, df_b: pd.DataFrame, id_a: str, id_b: str) -> pd.DataFrame:
    """Creates side-by-side comparison with delta columns."""
    metrics = ["High Conf", "Medium High Conf", "Medium Conf", "Probably Missing", "Confirmed Missing"]

    # Add workspace suffix
    a = df_a[["Concept Name"] + metrics].add_suffix(f" | {id_a}")
    b = df_b[["Concept Name"] + metrics].add_suffix(f" | {id_b}")

    merged = a.join(b, how="outer")

    # Keep one Concept Name column
    concept_a = f"Concept Name | {id_a}"
    concept_b = f"Concept Name | {id_b}"
    merged["Concept Name"] = merged[concept_a].fillna(merged[concept_b])
    merged = merged.drop(columns=[concept_a, concept_b])

    # Compute deltas
    for metric in metrics:
        col_a = f"{metric} | {id_a}"
        col_b = f"{metric} | {id_b}"
        if col_a in merged.columns and col_b in merged.columns:
            merged[f"{metric} Œî ({id_b}-{id_a})"] = merged[col_b].fillna(0) - merged[col_a].fillna(0)

    # Arrange columns
    ordered = ["Concept Name"]
    for metric in metrics:
        ordered += [f"{metric} | {id_a}", f"{metric} | {id_b}", f"{metric} Œî ({id_b}-{id_a})"]
    ordered += [c for c in merged.columns if c not in ordered]

    return merged[ordered].sort_values("Concept Name")


def main():
    token = get_bearer_token()
    print(f"‚úÖ Got Bearer Token: {token[:50]}...\n")

    data_a = fetch_confidence(token, WORKSPACE_A)
    data_b = fetch_confidence(token, WORKSPACE_B)

    df_a = to_df(WORKSPACE_A, data_a)
    df_b = to_df(WORKSPACE_B, data_b)

    if df_a.empty and df_b.empty:
        print("‚ùå Both workspaces returned no dashboard_data.")
        return

    short_a = WORKSPACE_A[-6:]
    short_b = WORKSPACE_B[-6:]
    comparison = side_by_side(df_a, df_b, short_a, short_b)

    print("\nüìä Side-by-Side Comparison (counts per concept):\n")
    with pd.option_context("display.max_rows", 60, "display.max_columns", 200, "display.width", 200):
        print(comparison.to_string())

    if EXPORT_TO_EXCEL:
        with pd.ExcelWriter(EXPORT_PATH, engine="xlsxwriter") as xw:
            df_a.reset_index().to_excel(xw, index=False, sheet_name=f"raw_{short_a}")
            df_b.reset_index().to_excel(xw, index=False, sheet_name=f"raw_{short_b}")
            comparison.reset_index().to_excel(xw, index=False, sheet_name="comparison")
        print(f"\n‚úÖ Excel written to: {EXPORT_PATH.resolve()}")


if __name__ == "__main__":
    main()
